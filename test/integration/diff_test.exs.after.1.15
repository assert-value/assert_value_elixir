defmodule DiffTest do
  use ExUnit.Case, async: true

  import AssertValue

  def f_nil() do
    # The way to dynamically generate nil, to avoid "type violation" warnings
    List.first([])
  end

  def f_int() do
    1
  end

  def f_str() do
    # Dynamic binary to avoid "type violation" warnings
    Enum.join(~w[aaa bbb ccc ddd eee fff] ++ [""], "\n")
  end

  test "empty string" do
    # prompt: y
    assert_value "" == ""
  end

  test "nil" do
    # prompt: y
    assert_value f_nil() == nil

    # prompt: y
    assert_value f_nil() == nil
  end

  test "integer and string" do
    # prompt: y
    assert_value f_int() == 1
  end


  test "diff" do
    a = """
    aaa
    bbb
    ccc
    ddd
    eee
    fff
    """
    b = """
    aaa
    xxx
    ddd
    eee
    fff
    GGG
    """

    # prompt: y
    assert_value a == """
                 aaa
                 bbb
                 ccc
                 ddd
                 eee
                 fff
                 """

    # prompt: y
    assert_value f_nil() == nil

    # prompt: y
    assert_value f_str() == """
                 aaa
                 bbb
                 ccc
                 ddd
                 eee
                 fff
                 """
  end

  test "char list diff" do
    # prompt: y
    assert_value ~c"aaa\nbbb\nccc\nddd\neee\nfff\n" ==
                   ~c"aaa\nbbb\nccc\nddd\neee\nfff\n"
  end

end
