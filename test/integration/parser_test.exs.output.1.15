parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value nil
+    assert_value nil == nil

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value true
+    assert_value true == true

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value false
+    assert_value false == false

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value :foo
+    assert_value :foo == :foo

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value "forty-two"
+    assert_value "forty-two" == "forty-two"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

     assert_value """
-    forty-two
-    сорок два
-    四十二
-    quarante deux
-    cuarenta y dos
-    zweiundvierzig
-    """
+                 forty-two
+                 сорок два
+                 四十二
+                 quarante deux
+                 cuarenta y dos
+                 zweiundvierzig
+                 """ == """
+                 forty-two
+                 сорок два
+                 四十二
+                 quarante deux
+                 cuarenta y dos
+                 zweiundvierzig
+                 """

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value ~S(forty-two)
+    assert_value ~S(forty-two) == "forty-two"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value ~s(forty-two)
+    assert_value ~s(forty-two) == "forty-two"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value <<65, 66, 67>>
+    assert_value <<65, 66, 67>> == "ABC"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value <<256::utf8>>
+    assert_value <<256::utf8>> == "Ā"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value ~c"forty-two"
+    assert_value ~c"forty-two" == ~c"forty-two"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

     assert_value ~c"""
-    forty-two
-    сорок два
-    """
+                 forty-two
+                 сорок два
+                 """ == [
+                   102,
+                   111,
+                   114,
+                   116,
+                   121,
+                   45,
+                   116,
+                   119,
+                   111,
+                   10,
+                   1089,
+                   1086,
+                   1088,
+                   1086,
+                   1082,
+                   32,
+                   1076,
+                   1074,
+                   1072,
+                   10
+                 ]

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value ~C(forty-two)
+    assert_value ~C(forty-two) == ~c"forty-two"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value ~c(forty-two)
+    assert_value ~c(forty-two) == ~c"forty-two"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value ~D[2018-01-01]
+    assert_value ~D[2018-01-01] == ~D[2018-01-01]

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value 0.42
+    assert_value 0.42 == 0.42

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value -0.42
+    assert_value -0.42 == -0.42

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value 42
+    assert_value 42 == 42

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value [4, 2, true, nil, "42"]
+    assert_value [4, 2, true, nil, "42"] == [4, 2, true, nil, "42"]

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value %{a: "forty", b: 2, c: nil}
+    assert_value %{a: "forty", b: 2, c: nil} == %{a: "forty", b: 2, c: nil}

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value ~N[2018-01-01 21:01:50]
+    assert_value ~N[2018-01-01 21:01:50] == ~N[2018-01-01 21:01:50]

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value ~r/foo/
+    assert_value ~r/foo/ == ~r/foo/

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value ~T[23:00:07]
+    assert_value ~T[23:00:07] == ~T[23:00:07]

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value {:ok, 42}
+    assert_value {:ok, 42} == {:ok, 42}

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value %User{}
+    assert_value %User{} == %ParserTest.User{name: "John", age: 27}

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value %User{age: 43}
+    assert_value %User{age: 43} == %ParserTest.User{name: "John", age: 43}

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value %{__struct__: ParserTest.User, age: 21, name: "Peter"}
+    assert_value %{__struct__: ParserTest.User, age: 21, name: "Peter"} ==
+                   %ParserTest.User{name: "Peter", age: 21}

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value ~W(foo bar)
+    assert_value ~W(foo bar) == ["foo", "bar"]

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual literals" assert_value failed

-    assert_value [%{a: 42, b: {:left, :light}, c: [%User{}, 1]}, nil]
+    assert_value [%{a: 42, b: {:left, :light}, c: [%User{}, 1]}, nil] == [
+                   %{
+                     a: 42,
+                     b: {:left, :light},
+                     c: [%ParserTest.User{name: "John", age: 27}, 1]
+                   },
+                   nil
+                 ]

Accept new value? [y,n,?] .
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value nil == f_false()
+    assert_value nil == nil

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value true == f_false()
+    assert_value true == true

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value :foo == f_atom_bar()
+    assert_value :foo == :foo

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value "forty-two" == "forty-three"
+    assert_value "forty-two" == "forty-two"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

     assert_value """
                  forty-two
                  сорок два
                  四十二
                  quarante deux
                  cuarenta y dos
                  zweiundvierzig
                  """ == """
-                 forty-three
+                 forty-two
                  сорок два
+                 四十二
                  quarante deux
                  cuarenta y dos
+                 zweiundvierzig
                  """

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value ~S(forty-two) == ~S(forty-three)
+    assert_value ~S(forty-two) == "forty-two"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value ~s(forty-two) == ~s(forty-three)
+    assert_value ~s(forty-two) == "forty-two"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value <<65, 66, 67>> == <<65, 66, 68>>
+    assert_value <<65, 66, 67>> == "ABC"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value <<256::utf8>> == <<267::utf8>>
+    assert_value <<256::utf8>> == "Ā"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value ~c"forty-two" == ~c"forty-three"
+    assert_value ~c"forty-two" == ~c"forty-two"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

     assert_value ~c"""
                  forty-two
                  сорок два
-                 """ == ~c"""
-                 forty-three
-                 сорок три
-                 """
+                 """ == [
+                   102,
+                   111,
+                   114,
+                   116,
+                   121,
+                   45,
+                   116,
+                   119,
+                   111,
+                   10,
+                   1089,
+                   1086,
+                   1088,
+                   1086,
+                   1082,
+                   32,
+                   1076,
+                   1074,
+                   1072,
+                   10
+                 ]

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value ~C(forty-two) == ~C(forty-three)
+    assert_value ~C(forty-two) == ~c"forty-two"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value ~c(forty-two) == ~c(forty-three)
+    assert_value ~c(forty-two) == ~c"forty-two"

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value ~D[2018-01-01] == ~D[2018-01-02]
+    assert_value ~D[2018-01-01] == ~D[2018-01-01]

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value 0.42 == 0.43
+    assert_value 0.42 == 0.42

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value -0.42 == -0.43
+    assert_value -0.42 == -0.42

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value 42 == 43
+    assert_value 42 == 42

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value -42 == 42
+    assert_value -42 == -42

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value [4, 2, true, nil, "42"] == [4, 3, true, nil, "42"]
+    assert_value [4, 2, true, nil, "42"] == [4, 2, true, nil, "42"]

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value %{a: "forty", b: 2, c: nil} == %{a: "forty", b: 2, c: f_true()}
+    assert_value %{a: "forty", b: 2, c: nil} == %{a: "forty", b: 2, c: nil}

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value ~N[2018-01-01 21:01:50] == ~N[2018-01-02 21:01:51]
+    assert_value ~N[2018-01-01 21:01:50] == ~N[2018-01-01 21:01:50]

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value ~T[23:00:07] == ~T[23:00:07.001004]
+    assert_value ~T[23:00:07] == ~T[23:00:07]

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value {:ok, 42} == {f_atom_bar(), 42}
+    assert_value {:ok, 42} == {:ok, 42}

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value %User{} == %User{age: 42}
+    assert_value %User{} == %ParserTest.User{name: "John", age: 27}

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value %User{age: 42} == %User{age: 43}
+    assert_value %User{age: 42} == %ParserTest.User{name: "John", age: 42}

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value %{__struct__: ParserTest.User, age: 21, name: "Peter"} == %{
-                   __struct__: ParserTest.User,
-                   age: 25,
-                   name: "James"
-                 }
+    assert_value %{__struct__: ParserTest.User, age: 21, name: "Peter"} ==
+                   %ParserTest.User{name: "Peter", age: 21}

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

-    assert_value ~W(foo bar) == ~W(foo baz)
+    assert_value ~W(foo bar) == ["foo", "bar"]

Accept new value? [y,n,?] 
parser_test.exs:##:"test actual and expected literals" assert_value failed

     assert_value [%{a: 42, b: {:left, :light}, c: [%User{}, 1]}, nil] == [
-                   %{a: 42, b: {:left, :light}, c: [%User{}, 2]},
+                   %{
+                     a: 42,
+                     b: {:left, :light},
+                     c: [%ParserTest.User{name: "John", age: 27}, 1]
+                   },
                    nil
                  ]

Accept new value? [y,n,?] .
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == nil
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == true
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == false
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == :foo
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == "forty-two"
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == """
-                 forty-three
-                 сорок два
-                 quarante deux
-                 cuarenta y dos
-                 """
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == ~S(forty-two)
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == ~s(forty-two)
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == <<65, 66, 67>>
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == <<256::utf8>>
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == ~c"forty-two"
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == ~c"""
-                 forty-three
-                 сорок три
-                 """
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == ~C(forty-two)
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == ~c(forty-two)
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == ~D[2018-01-01]
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == 0.42
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == -0.42
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == 42
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == -42
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == [4, 3, true, nil, "42"]
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == %{a: "forty", b: 2, c: nil}
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == ~N[2018-01-01 21:01:50]
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == ~r/foo/
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == ~T[23:00:07]
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == {:ok, 42}
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == %User{}
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == %User{age: 43}
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == ~W(foo bar)
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test expected literal" assert_value failed

-    assert_value Foo.foo() == [
-                   %{a: 42, b: {:left, :light}, c: [%User{}, 2]},
-                   nil
-                 ]
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] .
parser_test.exs:##:"test create file" assert_value "aaa\nbbb\nccc\n" == File.read!(Path.exp... failed

-
+aaa
+bbb
+ccc

Accept new value? [y,n,?] .
parser_test.exs:##:"test update file" assert_value "aaa\nbbb\nccc\n" == File.read!(Path.exp... failed

 aaa
-bBb
+bbb
 ccc

Accept new value? [y,n,?] .
parser_test.exs:##:"test spaces around equation" assert_value failed

-    assert_value "foo" == "bar"
+    assert_value "foo" == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test spaces around equation" assert_value failed

-    assert_value "foo" == "bar"
+    assert_value "foo" == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test spaces around equation" assert_value failed

-    assert_value "foo" == "bar"
+    assert_value "foo" == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test spaces around equation" assert_value failed

-    assert_value "foo" == "bar"
+    assert_value "foo" == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test spaces around equation" assert_value failed

-    assert_value "foo" == "bar"
+    assert_value "foo" == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test spaces around equation" assert_value failed

-    assert_value "foo" == "bar"
+    assert_value "foo" == "foo"

Accept new value? [y,n,?] .
parser_test.exs:##:"test string escaping" assert_value failed

-    assert_value "foo\\nbar\" \" \t \r %{}" == "foo"
+    assert_value "foo\\nbar\" \" \t \r %{}" == "foo\\nbar\" \" \t \r %{}"

Accept new value? [y,n,?] 
parser_test.exs:##:"test string escaping" assert_value failed

-    assert_value "foo" == "foo\\nbar\" \" \t \r %{}"
+    assert_value "foo" == "foo"

Accept new value? [y,n,?] .
parser_test.exs:##:"test float trailing zeros" assert_value failed

-    assert_value 42.0001000 == 42.00020010
+    assert_value 42.0001000 == 42.0001

Accept new value? [y,n,?] 
parser_test.exs:##:"test float trailing zeros" assert_value failed

-    assert_value -42.0001000 == -42.00020010
+    assert_value -42.0001000 == -42.0001

Accept new value? [y,n,?] .
parser_test.exs:##:"test bitstring and string" assert_value failed

-    assert_value <<66>> == "A"
+    assert_value <<66>> == "B"

Accept new value? [y,n,?] 
parser_test.exs:##:"test bitstring and string" assert_value failed

-    assert_value "B" == <<65>>
+    assert_value "B" == "B"

Accept new value? [y,n,?] .
parser_test.exs:##:"test variable" assert_value failed

-    assert_value foo
+    assert_value foo == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test variable" assert_value failed

-    assert_value foo == bar
+    assert_value foo == "foo"

Accept new value? [y,n,?] .
parser_test.exs:##:"test module attributes" assert_value failed

-    assert_value @foo
+    assert_value @foo == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test module attributes" assert_value failed

-    assert_value @foo == @bar
+    assert_value @foo == "foo"

Accept new value? [y,n,?] .
parser_test.exs:##:"test parens" assert_value failed

-    assert_value("foo")
+    assert_value("foo" == "foo")

Accept new value? [y,n,?] 
parser_test.exs:##:"test parens" assert_value failed

-    assert_value "foo"
+    assert_value "foo" == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test parens" assert_value failed

-    assert_value("foo")
+    assert_value("foo" == "foo")

Accept new value? [y,n,?] 
parser_test.exs:##:"test parens" assert_value failed

-    assert_value "foo"
+    assert_value "foo" == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test parens" assert_value failed

-    assert_value("foo" == "bar")
+    assert_value("foo" == "foo")

Accept new value? [y,n,?] 
parser_test.exs:##:"test parens" assert_value failed

-    assert_value "foo" == "bar"
+    assert_value "foo" == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test parens" assert_value failed

-    assert_value("foo" == "bar")
+    assert_value("foo" == "foo")

Accept new value? [y,n,?] 
parser_test.exs:##:"test parens" assert_value failed

-    assert_value "foo" == "bar"
+    assert_value "foo" == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test parens" assert_value failed

-    assert_value "foo" == "bar"
+    assert_value "foo" == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test parens" assert_value failed

-    assert_value "foo" == "bar"
+    assert_value "foo" == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test parens" assert_value failed

-    assert_value("foo" == "bar")
+    assert_value("foo" == "foo")

Accept new value? [y,n,?] 
parser_test.exs:##:"test parens" assert_value failed

-    assert_value "foo" == "bar"
+    assert_value "foo" == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test parens" assert_value failed

-    assert_value("foo" == "bar")
+    assert_value("foo" == "foo")

Accept new value? [y,n,?] .
parser_test.exs:##:"test left/right expressions" assert_value failed

-    assert_value foo <> "bar"
+    assert_value foo <> "bar" == "foobar"

Accept new value? [y,n,?] 
parser_test.exs:##:"test left/right expressions" assert_value failed

-    assert_value foo <> "bar" == bar <> "baz"
+    assert_value foo <> "bar" == "foobar"

Accept new value? [y,n,?] 
parser_test.exs:##:"test left/right expressions" assert_value failed

     assert_value foo <>
-                   "bar"
+                   "bar" == "foobar"

Accept new value? [y,n,?] 
parser_test.exs:##:"test left/right expressions" assert_value failed

     assert_value foo <>
                    "bar" ==
-                   bar <>
-                     "baz"
+                   "foobar"

Accept new value? [y,n,?] .
parser_test.exs:##:"test functions" assert_value failed

-    assert_value String.upcase("foo")
+    assert_value String.upcase("foo") == "FOO"

Accept new value? [y,n,?] 
parser_test.exs:##:"test functions" assert_value failed

-    assert_value hello.("World")
+    assert_value hello.("World") == "Hello World!"

Accept new value? [y,n,?] 
parser_test.exs:##:"test functions" assert_value failed

-    assert_value String.upcase("foo") == String.upcase("bar")
+    assert_value String.upcase("foo") == "FOO"

Accept new value? [y,n,?] 
parser_test.exs:##:"test functions" assert_value failed

-    assert_value hello.("World") == hello.("Elixir")
+    assert_value hello.("World") == "Hello World!"

Accept new value? [y,n,?] 
parser_test.exs:##:"test functions" assert_value failed

-    assert_value String.upcase("foo") == String.upcase("bar")
+    assert_value String.upcase("foo") == "FOO"

Accept new value? [y,n,?] .
parser_test.exs:##:"test pipes" assert_value failed

     assert_value String.upcase("foo") |> String.reverse() ==
-                   String.upcase("bar") |> String.reverse()
+                   "OOF"

Accept new value? [y,n,?] 
parser_test.exs:##:"test pipes" assert_value failed

     assert_value String.upcase("foo")
                  |> String.reverse() ==
-                   String.upcase("bar")
-                   |> String.reverse()
+                   "OOF"

Accept new value? [y,n,?] .
parser_test.exs:##:"test repeatable expressions" assert_value failed

-    assert_value 2 + 2 - 2 + 2 - 2 + 2
+    assert_value 2 + 2 - 2 + 2 - 2 + 2 == 4

Accept new value? [y,n,?] 
parser_test.exs:##:"test repeatable expressions" assert_value failed

-    assert_value 2 + 2 - 2 + 2 - 2 + 2 == 5
+    assert_value 2 + 2 - 2 + 2 - 2 + 2 == 4

Accept new value? [y,n,?] 
parser_test.exs:##:"test repeatable expressions" assert_value failed

-    assert_value 5 == 2 + 2 - 2 + 2 - 2 + 2
+    assert_value 5 == 5

Accept new value? [y,n,?] .
parser_test.exs:##:"test AST cleanup" assert_value failed

     assert_value quote(do: Kernel.||(1, false))
                  |> Macro.expand(__ENV__)
                  |> Macro.to_string()
                  |> String.replace(
                    "when x in [false, nil]",
                    "when Kernel.in(x, [false, nil])"
-                 )
+                 ) == """
+                 case 1 do
+                   x when Kernel.in(x, [false, nil]) -> false
+                   x -> x
+                 end<NOEOL>
+                 """

Accept new value? [y,n,?] .
parser_test.exs:##:"test function without arguments" assert_value failed

-    assert_value Foo.foo()
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] 
parser_test.exs:##:"test function without arguments" assert_value failed

-    assert_value Foo.foo()
+    assert_value Foo.foo() == "foo"

Accept new value? [y,n,?] .
parser_test.exs:##:"test not-serializable expected" assert_value failed

-    assert_value :foo == Port.list() |> List.first()
+    assert_value :foo == :foo

Accept new value? [y,n,?] .
parser_test.exs:##:"test integer floats" assert_value failed

-    assert_value 2 == 1.0
+    assert_value 2 == 2

Accept new value? [y,n,?] 
parser_test.exs:##:"test integer floats" assert_value failed

-    assert_value 1.0 == 2
+    assert_value 1.0 == 1.0

Accept new value? [y,n,?] .
20 tests, 0 failures
