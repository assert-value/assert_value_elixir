defmodule ParserTest do
  use ExUnit.Case, async: true

  @foo "foo"
  @bar "bar"

  defmodule User do
    defstruct name: "John", age: 27
  end

  defmodule Foo do
    def foo, do: "foo"
  end

  def f_nil() do
    # The way to dynamically generate nil, to avoid "type violation" warnings
    List.first([])
  end

  def f_false() do
    List.first([false])
  end

  def f_true() do
    List.first([true])
  end

  def f_atom_foo() do
    List.first([:foo])
  end

  def f_atom_bar() do
    List.first([:bar])
  end

  import AssertValue

  # Literals

  test "actual literals" do
    # prompt: y
    assert_value nil

    # prompt: y
    assert_value true

    # prompt: y
    assert_value false

    # prompt: y
    assert_value :foo

    # prompt: y
    assert_value "forty-two"

    # prompt: y
    assert_value """
    forty-two
    сорок два
    四十二
    quarante deux
    cuarenta y dos
    zweiundvierzig
    """

    # prompt: y
    assert_value ~S(forty-two)

    # prompt: y
    assert_value ~s(forty-two)

    # prompt: y
    assert_value <<65, 66, 67>>

    # prompt: y
    assert_value <<256 :: utf8>>

    # prompt: y
    assert_value ~c"forty-two"

    # prompt: y
    assert_value ~c"""
    forty-two
    сорок два
    """
    # prompt: y
    assert_value ~C(forty-two)

    # prompt: y
    assert_value ~c(forty-two)

    # prompt: y
    assert_value ~D[2018-01-01]

    # prompt: y
    assert_value 0.42

    # prompt: y
    assert_value -0.42

    # prompt: y
    assert_value 42

    # prompt: y
    assert_value [4, 2, true, nil, "42"]

    # prompt: y
    assert_value %{a: "forty", b: 2, c: nil}

    # prompt: y
    assert_value ~N[2018-01-01 21:01:50]

    # prompt: y
    assert_value ~r/foo/

    # prompt: y
    assert_value ~T[23:00:07]

    # prompt: y
    assert_value {:ok, 42}

    # prompt: y
    assert_value %User{}

    # prompt: y
    assert_value %User{age: 43}

    # prompt: y
    assert_value %{__struct__: ParserTest.User, age: 21, name: "Peter"}

    # prompt: y
    assert_value ~W(foo bar)

    # prompt: y
    assert_value  [%{a: 42, b: {:left, :light}, c: [%User{}, 1]}, nil]
  end

  test "actual and expected literals" do
    # prompt: y
    assert_value nil == f_false()

    # prompt: y
    assert_value true == f_false()

    # prompt: y
    assert_value :foo == f_atom_bar()

    # prompt: y
    assert_value "forty-two" == "forty-three"

    # prompt: y
    assert_value """
    forty-two
    сорок два
    四十二
    quarante deux
    cuarenta y dos
    zweiundvierzig
    """ == """
    forty-three
    сорок два
    quarante deux
    cuarenta y dos
    """

    # prompt: y
    assert_value ~S(forty-two) == ~S(forty-three)

    # prompt: y
    assert_value ~s(forty-two) == ~s(forty-three)

    # prompt: y
    assert_value <<65, 66, 67>> == <<65, 66, 68>>

    # prompt: y
    assert_value <<256 :: utf8>> == <<267 :: utf8>>

    # prompt: y
    assert_value ~c"forty-two" == ~c"forty-three"

    # prompt: y
    assert_value ~c"""
    forty-two
    сорок два
    """ == ~c"""
    forty-three
    сорок три
    """

    # prompt: y
    assert_value ~C(forty-two) == ~C(forty-three)

    # prompt: y
    assert_value ~c(forty-two) == ~c(forty-three)

    # prompt: y
    assert_value ~D[2018-01-01] == ~D[2018-01-02]

    # prompt: y
    assert_value 0.42 == 0.43

    # prompt: y
    assert_value -0.42 == -0.43

    # prompt: y
    assert_value 42 == 43

    # prompt: y
    assert_value -42 == 42

    # prompt: y
    assert_value [4, 2, true, nil, "42"] == [4, 3, true, nil, "42"]

    # prompt: y
    assert_value %{a: "forty", b: 2, c: nil} == %{a: "forty", b: 2, c: f_true()}

    # prompt: y
    assert_value ~N[2018-01-01 21:01:50] == ~N[2018-01-02 21:01:51]

    # prompt: y
    assert_value ~T[23:00:07] == ~T[23:00:07.001004]

    # prompt: y
    assert_value {:ok, 42} == {f_atom_bar(), 42}

    # prompt: y
    assert_value %User{} == %User{age: 42}

    # prompt: y
    assert_value %User{age: 42} == %User{age: 43}

    # This should pass
    assert_value %{__struct__: ParserTest.User, age: 21, name: "Peter"} == %User{age: 21, name: "Peter"}

    # prompt: y
    assert_value %{__struct__: ParserTest.User, age: 21, name: "Peter"} == %{__struct__: ParserTest.User, age: 25, name: "James"}

    # prompt: y
    assert_value ~W(foo bar) == ~W(foo baz)

    # prompt: y
    assert_value  [%{a: 42, b: {:left, :light}, c: [%User{}, 1]}, nil] == [%{a: 42, b: {:left, :light}, c: [%User{}, 2]}, nil]
  end

  test "expected literal" do
    # prompt: y
    assert_value Foo.foo() == nil

    # prompt: y
    assert_value Foo.foo() == true

    # prompt: y
    assert_value Foo.foo() == false

    # prompt: y
    assert_value Foo.foo() == :foo

    # prompt: y
    assert_value Foo.foo() == "forty-two"

    # prompt: y
    assert_value Foo.foo() == """
    forty-three
    сорок два
    quarante deux
    cuarenta y dos
    """

    # prompt: y
    assert_value Foo.foo() == ~S(forty-two)

    # prompt: y
    assert_value Foo.foo() == ~s(forty-two)

    # prompt: y
    assert_value Foo.foo() == <<65, 66, 67>>

    # prompt: y
    assert_value Foo.foo() == <<256 :: utf8>>

    # prompt: y
    assert_value Foo.foo() == ~c"forty-two"

    # prompt: y
    assert_value Foo.foo() == ~c"""
    forty-three
    сорок три
    """

    # prompt: y
    assert_value Foo.foo() == ~C(forty-two)

    # prompt: y
    assert_value Foo.foo() == ~c(forty-two)

    # prompt: y
    assert_value Foo.foo() == ~D[2018-01-01]

    # prompt: y
    assert_value Foo.foo() == 0.42

    # prompt: y
    assert_value Foo.foo() == -0.42

    # prompt: y
    assert_value Foo.foo() == 42

    # prompt: y
    assert_value Foo.foo() == -42

    # prompt: y
    assert_value Foo.foo() == [4, 3, true, nil, "42"]

    # prompt: y
    assert_value Foo.foo() == %{a: "forty", b: 2, c: nil}

    # prompt: y
    assert_value Foo.foo() == ~N[2018-01-01 21:01:50]

    # prompt: y
    assert_value Foo.foo() == ~r/foo/

    # prompt: y
    assert_value Foo.foo() == ~T[23:00:07]

    # prompt: y
    assert_value Foo.foo() == {:ok, 42}

    # prompt: y
    assert_value Foo.foo() == %User{}

    # prompt: y
    assert_value Foo.foo() == %User{age: 43}

    # prompt: y
    assert_value Foo.foo() == ~W(foo bar)

    # prompt: y
    assert_value Foo.foo() == [%{a: 42, b: {:left, :light}, c: [%User{}, 2]}, nil]
  end

  test "create file" do
    # prompt: y
    assert_value """
    aaa
    bbb
    ccc
    """ == File.read!(Path.expand("file_to_create", __DIR__))
  end

  test "update file" do
    # prompt: y
    assert_value """
    aaa
    bbb
    ccc
    """ == File.read!(Path.expand("file_to_update", __DIR__))
  end

  # Corner cases

  test "spaces around equation" do
    # prompt: y
    assert_value "foo"== "bar"

    # prompt: y
    assert_value "foo" =="bar"

    # prompt: y
    assert_value "foo"=="bar"

    # prompt: y
    assert_value "foo"   == "bar"

    # prompt: y
    assert_value "foo" ==   "bar"

    # prompt: y
    assert_value "foo"   ==   "bar"
  end

  test "string escaping" do
    # prompt: y
    assert_value "foo\\nbar\" \" \t \r %{}" == "foo"

    # prompt: y
    assert_value "foo" == "foo\\nbar\" \" \t \r %{}"
  end

  test "float trailing zeros" do
    # prompt: y
    assert_value 42.0001000 == 42.00020010

    # prompt: y
    assert_value -42.0001000 == -42.00020010
  end

  test "bitstring and string" do
    assert_value <<65>> == "A"
    # prompt: y
    assert_value <<66>> == "A"

    assert_value "A" == <<65>>
    # prompt: y
    assert_value "B" == <<65>>
  end

  # Expressions

  test "variable" do
    foo = "foo"
    bar = "bar"

    # prompt: y
    assert_value foo

    # prompt: y
    assert_value foo == bar
  end

  test "module attributes" do
    # prompt: y
    assert_value @foo

    # prompt: y
    assert_value @foo == @bar

    # prompt: y
    assert_value "foo" == @foo
  end

  test "parens" do
    # prompt: y
    assert_value("foo")

    # prompt: y
    assert_value ("foo")

    # prompt: y
    assert_value(("foo"))

    # prompt: y
    assert_value (("foo"))

    # prompt: y
    assert_value("foo" == "bar")

    # prompt: y
    assert_value ("foo" == "bar")

    # prompt: y
    assert_value(("foo" == "bar"))

    # prompt: y
    assert_value (("foo" == "bar"))

    # prompt: y
    assert_value ("foo") == ("bar")

    # prompt: y
    assert_value (("foo")) == (("bar"))

    # prompt: y
    assert_value((("foo")) == (("bar")))

    # prompt: y
    assert_value ((("foo")) == (("bar")))

    # prompt: y
    assert_value(
      (
        ("foo")
      ) == (
        ("bar")
      )
    )
  end

  test "left/right expressions" do
    foo = "foo"
    bar = "bar"

    # prompt: y
    assert_value foo <> "bar"

    # prompt: y
    assert_value foo <> "bar" == bar <> "baz"

    # prompt: y
    assert_value foo <>
      "bar"

    # prompt: y
    assert_value foo <>
      "bar" ==
      bar
      <> "baz"
  end

  test "functions" do
    hello = fn(x) ->
        "Hello " <> x <> "!"
    end

    # prompt: y
    assert_value String.upcase("foo")

    # prompt: y
    assert_value hello.("World")

    # prompt: y
    assert_value String.upcase("foo") == String.upcase("bar")

    # prompt: y
    assert_value hello.("World") == hello.("Elixir")

    # prompt: y
    assert_value String.upcase(
      "foo"
    ) == String.upcase(
      "bar"
    )
  end

  test "pipes" do
    # prompt: y
    assert_value String.upcase("foo") |> String.reverse ==
        String.upcase("bar") |> String.reverse

    # prompt: y
    assert_value String.upcase("foo")
                 |> String.reverse
                 ==
                 String.upcase("bar")
                 |> String.reverse
  end

  test "repeatable expressions" do
    # prompt: y
    assert_value 2 + 2 - 2 + 2 - 2 + 2

    # prompt: y
    assert_value 2 + 2 - 2 + 2 - 2 + 2 == 5

    # prompt: y
    assert_value 5 == 2 + 2 - 2 + 2 - 2 + 2
  end

  test "AST cleanup" do
    # Macro.expand below produces AST with hygienic counter
    # Check that we can correctly parse it
    # Last String.replace is to produce the same result code
    # from different Elixirs. 1.6.0 has slightly different
    # "if" macro.

    assert_value quote(do: Kernel.||(1, false))
      |> Macro.expand(__ENV__)
      |> Macro.to_string
      |> String.replace(
        "when x in [false, nil]",
        "when Kernel.in(x, [false, nil])"
      )
  end

  test "function without arguments" do
    # prompt: y
    assert_value Foo.foo

    # prompt: y
    assert_value Foo.foo()
  end

  test "not-serializable expected" do
    # This should pass. We can successfully parse expected and replace
    # it with serialized value
    # prompt: y
    assert_value :foo == Port.list() |> List.first
  end

  test "integer floats" do
    # prompt: y
    assert_value 2 == 1.0

    # prompt: y
    assert_value 1.0 == 2
  end

end
